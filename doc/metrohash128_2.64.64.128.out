ok 1 - SelfTest - Verify 89 Hashes
ok 2 - Found Hash # metrohash128_2
###################################################################
### Testing metrohash128_2 - no seed_state
### - MetroHash128_2 for 64-bit -
### seedbits: 64 statebits: 64 hashbits: 128
###################################################################
### Sanity Tests ###
ok 3 - Verification code # metrohash128_2
# Sanity check simple key bit flips and consistency..........
ok 4 - SanityTest # metrohash128_2
# Sanity check null suffixes change the hash (simple)..........
ok 5 - Appended Zeroes Test # metrohash128_2
ok 6 - Sanity Test # metrohash128_2
### Speed Tests ###
## Bulk speed test - 262144-byte keys
# Alignment  7 -  5.089 bytes/cycle - 14560.34 MiB/sec @ 3 ghz
# Alignment  6 -  5.089 bytes/cycle - 14561.15 MiB/sec @ 3 ghz
# Alignment  5 -  5.089 bytes/cycle - 14560.54 MiB/sec @ 3 ghz
# Alignment  4 -  5.090 bytes/cycle - 14562.00 MiB/sec @ 3 ghz
# Alignment  3 -  5.090 bytes/cycle - 14561.33 MiB/sec @ 3 ghz
# Alignment  2 -  5.089 bytes/cycle - 14561.06 MiB/sec @ 3 ghz
# Alignment  1 -  5.089 bytes/cycle - 14560.14 MiB/sec @ 3 ghz
# Alignment  0 -  5.276 bytes/cycle - 15093.99 MiB/sec @ 3 ghz
# Average      -  5.113 bytes/cycle - 14627.57 MiB/sec @ 3 ghz
## KeySpeed tests
# metrohash128_2            0 byte keys       20.000 c/h
# metrohash128_2            1 byte keys       24.000 c/h       24.000 c/b        0.042 b/c
# metrohash128_2            2 byte keys       26.989 c/h       13.494 c/b        0.074 b/c
# metrohash128_2            3 byte keys       29.000 c/h        9.667 c/b        0.103 b/c
# metrohash128_2            4 byte keys       24.000 c/h        6.000 c/b        0.167 b/c
# metrohash128_2            5 byte keys       36.000 c/h        7.200 c/b        0.139 b/c
# metrohash128_2            6 byte keys       31.996 c/h        5.333 c/b        0.188 b/c
# metrohash128_2            7 byte keys       36.570 c/h        5.224 c/b        0.191 b/c
# metrohash128_2            8 byte keys       26.414 c/h        3.302 c/b        0.303 b/c
# metrohash128_2            9 byte keys       29.466 c/h        3.274 c/b        0.305 b/c
# metrohash128_2           10 byte keys       38.000 c/h        3.800 c/b        0.263 b/c
# metrohash128_2           11 byte keys       41.000 c/h        3.727 c/b        0.268 b/c
# metrohash128_2           12 byte keys       29.000 c/h        2.417 c/b        0.414 b/c
# metrohash128_2           13 byte keys       41.000 c/h        3.154 c/b        0.317 b/c
# metrohash128_2           14 byte keys       39.000 c/h        2.786 c/b        0.359 b/c
# metrohash128_2           15 byte keys       42.000 c/h        2.800 c/b        0.357 b/c
# metrohash128_2           16 byte keys       30.000 c/h        1.875 c/b        0.533 b/c
# metrohash128_2           17 byte keys       41.000 c/h        2.412 c/b        0.415 b/c
# metrohash128_2           18 byte keys       40.000 c/h        2.222 c/b        0.450 b/c
# metrohash128_2           19 byte keys       42.000 c/h        2.211 c/b        0.452 b/c
# metrohash128_2           20 byte keys       41.000 c/h        2.050 c/b        0.488 b/c
# metrohash128_2           21 byte keys       53.000 c/h        2.524 c/b        0.396 b/c
# metrohash128_2           22 byte keys       49.000 c/h        2.227 c/b        0.449 b/c
# metrohash128_2           23 byte keys       54.000 c/h        2.348 c/b        0.426 b/c
# metrohash128_2           24 byte keys       40.000 c/h        1.667 c/b        0.600 b/c
# metrohash128_2           25 byte keys       42.000 c/h        1.680 c/b        0.595 b/c
# metrohash128_2           26 byte keys       51.496 c/h        1.981 c/b        0.505 b/c
# metrohash128_2           27 byte keys       54.497 c/h        2.018 c/b        0.495 b/c
# metrohash128_2           28 byte keys       42.448 c/h        1.516 c/b        0.660 b/c
# metrohash128_2           29 byte keys       54.000 c/h        1.862 c/b        0.537 b/c
# metrohash128_2           30 byte keys       52.635 c/h        1.755 c/b        0.570 b/c
# metrohash128_2           31 byte keys       55.000 c/h        1.774 c/b        0.564 b/c
#                          Average < 32       39.266 c/h        2.533 c/b        0.395 b/c
# metrohash128_2           32 byte keys       44.270 c/h        1.383 c/b        0.723 b/c
# metrohash128_2           36 byte keys       55.944 c/h        1.554 c/b        0.643 b/c
# metrohash128_2           40 byte keys       54.930 c/h        1.373 c/b        0.728 b/c
# metrohash128_2           44 byte keys       57.932 c/h        1.317 c/b        0.760 b/c
# metrohash128_2           48 byte keys       58.904 c/h        1.227 c/b        0.815 b/c
# metrohash128_2           52 byte keys       69.784 c/h        1.342 c/b        0.745 b/c
# metrohash128_2           56 byte keys       68.896 c/h        1.230 c/b        0.813 b/c
# metrohash128_2           60 byte keys       71.000 c/h        1.183 c/b        0.845 b/c
# metrohash128_2           64 byte keys       49.493 c/h        0.773 c/b        1.293 b/c
# metrohash128_2           68 byte keys       59.120 c/h        0.869 c/b        1.150 b/c
# metrohash128_2           72 byte keys       58.733 c/h        0.816 c/b        1.226 b/c
# metrohash128_2           76 byte keys       61.997 c/h        0.816 c/b        1.226 b/c
# metrohash128_2           80 byte keys       62.852 c/h        0.786 c/b        1.273 b/c
# metrohash128_2           84 byte keys       73.748 c/h        0.878 c/b        1.139 b/c
# metrohash128_2           88 byte keys       72.000 c/h        0.818 c/b        1.222 b/c
# metrohash128_2           92 byte keys       75.972 c/h        0.826 c/b        1.211 b/c
# metrohash128_2           96 byte keys       54.125 c/h        0.564 c/b        1.774 b/c
# metrohash128_2          100 byte keys       63.364 c/h        0.634 c/b        1.578 b/c
# metrohash128_2          104 byte keys       62.995 c/h        0.606 c/b        1.651 b/c
# metrohash128_2          108 byte keys       67.644 c/h        0.626 c/b        1.597 b/c
# metrohash128_2          112 byte keys       68.474 c/h        0.611 c/b        1.636 b/c
# metrohash128_2          116 byte keys       79.634 c/h        0.686 c/b        1.457 b/c
# metrohash128_2          120 byte keys       76.765 c/h        0.640 c/b        1.563 b/c
# metrohash128_2          124 byte keys       80.777 c/h        0.651 c/b        1.535 b/c
#                         Average < 128       50.105 c/h        1.185 c/b        0.844 b/c
# metrohash128_2          128 byte keys       59.995 c/h        0.469 c/b        2.134 b/c
# metrohash128_2          256 byte keys       87.653 c/h        0.342 c/b        2.921 b/c
# metrohash128_2          512 byte keys      131.733 c/h        0.257 c/b        3.887 b/c
# metrohash128_2         1024 byte keys      240.348 c/h        0.235 c/b        4.260 b/c
# metrohash128_2         2048 byte keys      430.535 c/h        0.210 c/b        4.757 b/c
# metrohash128_2         4096 byte keys      806.193 c/h        0.197 c/b        5.081 b/c
# metrohash128_2         8192 byte keys     1559.432 c/h        0.190 c/b        5.253 b/c
# metrohash128_2        16384 byte keys     3067.633 c/h        0.187 c/b        5.341 b/c
# metrohash128_2        32768 byte keys     6135.237 c/h        0.187 c/b        5.341 b/c
# metrohash128_2        65536 byte keys    12299.780 c/h        0.188 c/b        5.328 b/c
#                       Overall Average      418.552 c/h        0.207 c/b        4.826 b/c
ok 7 - Speed (always passes) # metrohash128_2
### Differential Tests ###
# Testing 8303632 up-to-5-bit differentials in 64-bit keys -> 128 bit hashes.
# 1000 reps, 8303632000 total tests, expecting 0.00 random collisions..........
ok 8 - Differential collisions # metrohash128_2
ok 9 - Nothing skipped during differential collision check # metrohash128_2
# 0 total collisions, of which 0 single collisions were ignored
ok 10 - ProcessDifferentials
# Testing 11017632 up-to-4-bit differentials in 128-bit keys -> 128 bit hashes.
# 1000 reps, 11017632000 total tests, expecting 0.00 random collisions..........
ok 11 - Differential collisions # metrohash128_2
ok 12 - Nothing skipped during differential collision check # metrohash128_2
# 0 total collisions, of which 0 single collisions were ignored
ok 13 - ProcessDifferentials
# Testing 2796416 up-to-3-bit differentials in 256-bit keys -> 128 bit hashes.
# 1000 reps, 2796416000 total tests, expecting 0.00 random collisions..........
ok 14 - Differential collisions # metrohash128_2
ok 15 - Nothing skipped during differential collision check # metrohash128_2
# 0 total collisions, of which 0 single collisions were ignored
ok 16 - ProcessDifferentials
ok 17 - Differential # metrohash128_2
### Avalanche Tests ### - seed-bits: 64 hash-bits: 128
# Samples 250000, expected error 0.00102400, confidence level 99.99994267%
# Testing   0-bit keys.......... not ok! # worst-bit:   0.752% error-ratio: 9.966041e-01
#              +---------------------------------------------------+
#              |012345678901234567890123456789012345678901234567890|
#              +---------------------------------------------------+
# Scale:       |.1234567890abcdefghijklmnopqrstuvwxyzãäåêëîïðñôõöûü|
#              |üÿABCDEFGHIJKLMNOPQRSTUVWXYZÂÃÄÅÊËÑÔÕÖÛÜÝø¤*©®¶&%@#|
#              +---------------------------------------------------+
#              |pct diff from 50%: abs((0.5-(changed/reps))*2) *100|
#              +----------------------------------------------------------------+
#              |0         1         2         3         4         5         6   |
#              |0123456789012345678901234567890123456789012345678901234567890123|
#              +----------------------------------------------------------------+
# seed     0.0 |........................1.......1...............................|
# seed     0.1 |................................................................|
# seed     1.0 |.......................................1...............1........|
# seed     1.1 |.......................................................1........|
# seed     2.0 |................................................................| x 2
# seed     2.1 |..................1.............................................|
# seed     3.1 |...1............................................................|
# seed     4.0 |.................1.......1.....................................1|
# seed     4.1 |...................1............................................|
# seed     5.0 |..........................................1.....................|
# seed     5.1 |.............1..................................................|
# seed     6.0 |................................................................| x 3
# seed     6.1 |................................................................|
# seed     7.1 |......1.........................1...............1...........1...|
# seed     8.1 |.............1.........................1........................|
# seed     9.0 |.......1............................1...........................|
# seed     9.1 |................................................................|
# seed    10.0 |................................................................| x 2
# seed    10.1 |...................1............................................|
# seed    11.1 |................................................................|
# seed    12.0 |............1..........................1........................|
# seed    12.1 |................1...............................................|
# seed    13.0 |...............1................................................|
# seed    13.1 |...........1....................................................|
# seed    14.0 |.......1........................................................|
# seed    14.1 |................................................................|
# seed    15.0 |................................................................| x 2
# seed    15.1 |............................................1...................|
# seed    16.1 |........1.......................................................|
# seed    17.0 |..........................................1.....................|
# seed    17.1 |................................................................|
# seed    18.0 |.......1.......1................................................|
# seed    18.1 |1.................11............1...............................|
# seed    19.0 |...................................................1............|
# seed    19.1 |................................................................|
# seed    20.0 |..........1.1...................................................|
# seed    20.1 |.......................1....................................1...|
# seed    21.0 |............................................1...................|
# seed    21.1 |1.................1..............1..............................|
# seed    22.0 |......................................1.................11......|
# seed    22.1 |................................................................|
# seed    23.0 |................................1...............................|
# seed    23.1 |...................1............1...................1...........|
# seed    24.0 |................................................................| x 2
# seed    24.1 |..................1....1............................1...........|
# seed    25.1 |...........................1....................................|
# seed    26.0 |.........................1......................................|
# seed    26.1 |........1.......................................................|
# seed    27.0 |................................................................|
# seed    27.1 |................................................................| x 3
# seed    28.0 |...........1..........................1.........................|
# seed    29.0 |................................1............................1..|
# seed    30.0 |...............................................................1|
# seed    30.1 |..................1.............................................|
# seed    31.0 |................................................................|
# seed    31.1 |................................................................| x 2
# seed    32.0 |...............................................................1|
# seed    33.0 |................................................................|
# seed    33.1 |............................................1...................|
# seed    34.0 |.......................................................11.......|
# seed    34.1 |................................1...............................|
# seed    35.0 |................................................................|
# seed    35.1 |.....................1..........................................|
# seed    36.0 |.......................................1........................|
# seed    36.1 |................................................................| x 2
# seed    37.0 |................................................................|
# seed    38.0 |.......................................1............1...........|
# seed    38.1 |.............1.......................1..........................|
# seed    39.0 |..1.............................................................|
# seed    39.1 |................................................................| x 2
# seed    40.0 |................................................................|
# seed    41.0 |...................................................1....1.......|
# seed    41.1 |.....................................................1..........|
# seed    42.0 |................................................................| x 4
# seed    42.1 |................................................................| x 2
# seed    44.1 |........1.......................................................|
# seed    45.1 |................................................................|
# seed    46.0 |.........................1......................................|
# seed    46.1 |.......................1........................................|
# seed    47.0 |................................................................| x 2
# seed    47.1 |.......................1.................1......................|
# seed    48.1 |.....................................1..........................|
# seed    49.0 |...................................................1............|
# seed    49.1 |................................................................|
# seed    50.0 |................................................................|
# seed    50.1 |.............1..................................................|
# seed    51.0 |..........................................................1.....|
# seed    51.1 |.......................1........................................|
# seed    52.0 |................................................................| x 3
# seed    52.1 |...............................1................................|
# seed    53.1 |................................................................|
# seed    54.1 |...............................................................1|
# seed    55.0 |.........................1..............................1.......|
# seed    55.1 |...............................1................................|
# seed    56.0 |..........1.....................................................|
# seed    56.1 |................................................................| x 3
# seed    57.0 |................................................................|
# seed    58.0 |1...............................................................|
# seed    59.0 |................................................................|
# seed    59.1 |..........................1.....................................|
# seed    60.0 |..........................1.....................................|
# seed    60.1 |.........1......................................................|
# seed    61.0 |................................................................| x 3
# seed    61.1 |................................................................|
# seed    62.1 |.......................1........................................| x 2
#              +-------------------------------------------------------------------+
#              +---------------------------------------------------+
#              |012345678901234567890123456789012345678901234567890|
#              +---------------------------------------------------+
# Scale:       |.1234567890abcdefghijklmnopqrstuvwxyzãäåêëîïðñôõöûü|
#              |üÿABCDEFGHIJKLMNOPQRSTUVWXYZÂÃÄÅÊËÑÔÕÖÛÜÝø¤*©®¶&%@#|
#              +---------------------------------------------------+
#              |scaled p-value above confidence level (zero is ok) |
#              +----------------------------------------------------------------+
#              |0         1         2         3         4         5         6   |
#              |0123456789012345678901234567890123456789012345678901234567890123|
#              +----------------------------------------------------------------+
# seed     0.0 |................................................................| x 64
# seed     0.1 |................................................................| x 64
#              +-------------------------------------------------------------------+
# 0 of 8192 bits failed (0.00%) failed at 99.999943 confidence
#     g-test: 0.000000%
#     sum-error-square: 0.00102052
#     hash bit-level errors: 1/128
#     - hash bit 38 gtest-prob not-random: 100.0000 (8011218/7988782)
not ok 18 - Strict Avalanche Criteria - 0 bit keys
# Testing   8-bit keys.......... ok.     # worst-bit:   0.750% error-ratio: 1.003121e+00
ok 19 - Strict Avalanche Criteria - 8 bit keys
# Testing  16-bit keys.......... ok.     # worst-bit:   0.751% error-ratio: 9.905572e-01
ok 20 - Strict Avalanche Criteria - 16 bit keys
# Testing  24-bit keys.......... ok.     # worst-bit:   0.735% error-ratio: 1.004990e+00
ok 21 - Strict Avalanche Criteria - 24 bit keys
# Testing  32-bit keys.......... ok.     # worst-bit:   0.932% error-ratio: 1.005690e+00
ok 22 - Strict Avalanche Criteria - 32 bit keys
# Testing  40-bit keys.......... ok.     # worst-bit:   0.870% error-ratio: 1.015987e+00
ok 23 - Strict Avalanche Criteria - 40 bit keys
# Testing  48-bit keys.......... ok.     # worst-bit:   0.801% error-ratio: 1.002362e+00
ok 24 - Strict Avalanche Criteria - 48 bit keys
# Testing  56-bit keys.......... ok.     # worst-bit:   0.872% error-ratio: 9.952210e-01
ok 25 - Strict Avalanche Criteria - 56 bit keys
# Testing  64-bit keys.......... ok.     # worst-bit:   0.832% error-ratio: 1.009524e+00
ok 26 - Strict Avalanche Criteria - 64 bit keys
# Testing  72-bit keys.......... ok.     # worst-bit:   0.899% error-ratio: 9.963696e-01
ok 27 - Strict Avalanche Criteria - 72 bit keys
# Testing  80-bit keys.......... ok.     # worst-bit:   0.861% error-ratio: 1.004647e+00
ok 28 - Strict Avalanche Criteria - 80 bit keys
# Testing  88-bit keys.......... ok.     # worst-bit:   0.813% error-ratio: 1.005208e+00
ok 29 - Strict Avalanche Criteria - 88 bit keys
# Testing  96-bit keys.......... ok.     # worst-bit:   0.783% error-ratio: 9.958150e-01
ok 30 - Strict Avalanche Criteria - 96 bit keys
# Testing 104-bit keys.......... ok.     # worst-bit:   0.846% error-ratio: 1.002693e+00
ok 31 - Strict Avalanche Criteria - 104 bit keys
# Testing 112-bit keys.......... ok.     # worst-bit:   0.795% error-ratio: 1.006313e+00
ok 32 - Strict Avalanche Criteria - 112 bit keys
# Testing 120-bit keys.......... ok.     # worst-bit:   0.922% error-ratio: 1.014668e+00
ok 33 - Strict Avalanche Criteria - 120 bit keys
# Testing 128-bit keys.......... ok.     # worst-bit:   0.822% error-ratio: 9.888793e-01
ok 34 - Strict Avalanche Criteria - 128 bit keys
# Testing 136-bit keys.......... ok.     # worst-bit:   0.906% error-ratio: 1.010006e+00
ok 35 - Strict Avalanche Criteria - 136 bit keys
# Testing 144-bit keys.......... ok.     # worst-bit:   0.842% error-ratio: 1.002141e+00
ok 36 - Strict Avalanche Criteria - 144 bit keys
# Testing 152-bit keys.......... ok.     # worst-bit:   0.973% error-ratio: 1.005412e+00
ok 37 - Strict Avalanche Criteria - 152 bit keys
# Testing 152-bit keys.......... ok.     # worst-bit:   0.909% error-ratio: 9.747094e-01
ok 38 - Strict Avalanche Criteria - 160 bit keys
# Testing 256-bit keys.......... ok.     # worst-bit:   0.841% error-ratio: 9.919700e-01
ok 39 - Strict Avalanche Criteria - 256 bit keys
not ok 40 - Strict Avalanche Criteria # metrohash128_2
### Keyset 'Cyclic' Tests ###
# Keyset 'Cyclic' - 8 cycles of 16 bytes - 10000000 keys
# Testing collisions   - Expected     0.00, actual        0 ( 0.00x) - passed
ok 41 - Collision Rate for Keyset 'Cyclic' - 8 cycles of 16 bytes - 10000000 keys
ok 42 - Distribution Bias Check for Keyset 'Cyclic' - 8 cycles of 16 bytes - 10000000 keys
# Keyset 'Cyclic' - 8 cycles of 17 bytes - 10000000 keys
# Testing collisions   - Expected     0.00, actual        0 ( 0.00x) - passed
ok 43 - Collision Rate for Keyset 'Cyclic' - 8 cycles of 17 bytes - 10000000 keys
ok 44 - Distribution Bias Check for Keyset 'Cyclic' - 8 cycles of 17 bytes - 10000000 keys
# Keyset 'Cyclic' - 8 cycles of 18 bytes - 10000000 keys
# Testing collisions   - Expected     0.00, actual        0 ( 0.00x) - passed
ok 45 - Collision Rate for Keyset 'Cyclic' - 8 cycles of 18 bytes - 10000000 keys
ok 46 - Distribution Bias Check for Keyset 'Cyclic' - 8 cycles of 18 bytes - 10000000 keys
# Keyset 'Cyclic' - 8 cycles of 19 bytes - 10000000 keys
# Testing collisions   - Expected     0.00, actual        0 ( 0.00x) - passed
ok 47 - Collision Rate for Keyset 'Cyclic' - 8 cycles of 19 bytes - 10000000 keys
ok 48 - Distribution Bias Check for Keyset 'Cyclic' - 8 cycles of 19 bytes - 10000000 keys
# Keyset 'Cyclic' - 8 cycles of 20 bytes - 10000000 keys
# Testing collisions   - Expected     0.00, actual        0 ( 0.00x) - passed
ok 49 - Collision Rate for Keyset 'Cyclic' - 8 cycles of 20 bytes - 10000000 keys
ok 50 - Distribution Bias Check for Keyset 'Cyclic' - 8 cycles of 20 bytes - 10000000 keys
ok 51 - Keyset 'Cyclic' # metrohash128_2
### Keyset 'TwoBytes' Tests ###
# Testing collisions   - Expected     0.00, actual        0 ( 0.00x) - passed
ok 52 - Collision Rate for Keyset 'TwoBytes' - up-to-4-byte keys, 652545 total keys
ok 53 - Distribution Bias Check for Keyset 'TwoBytes' - up-to-4-byte keys, 652545 total keys
# Testing collisions   - Expected     0.00, actual        0 ( 0.00x) - passed
ok 54 - Collision Rate for Keyset 'TwoBytes' - up-to-8-byte keys, 5471025 total keys
ok 55 - Distribution Bias Check for Keyset 'TwoBytes' - up-to-8-byte keys, 5471025 total keys
# Testing collisions   - Expected     0.00, actual        0 ( 0.00x) - passed
ok 56 - Collision Rate for Keyset 'TwoBytes' - up-to-12-byte keys, 18616785 total keys
ok 57 - Distribution Bias Check for Keyset 'TwoBytes' - up-to-12-byte keys, 18616785 total keys
# Testing collisions   - Expected     0.00, actual        0 ( 0.00x) - passed
ok 58 - Collision Rate for Keyset 'TwoBytes' - up-to-16-byte keys, 44251425 total keys
ok 59 - Distribution Bias Check for Keyset 'TwoBytes' - up-to-16-byte keys, 44251425 total keys
# Testing collisions   - Expected     0.00, actual        0 ( 0.00x) - passed
ok 60 - Collision Rate for Keyset 'TwoBytes' - up-to-20-byte keys, 86536545 total keys
ok 61 - Distribution Bias Check for Keyset 'TwoBytes' - up-to-20-byte keys, 86536545 total keys
ok 62 - Keyset 'TwoBytes' # metrohash128_2
### Keyset 'Sparse' Tests ###
# Keyset 'Sparse' - 32-bit keys with up to 6 bits set - 1149017 keys
# Testing collisions   - Expected     0.00, actual        0 ( 0.00x) - passed
ok 63 - Collision Rate for Keyset 'Sparse' - 32-bit keys with up to 6 bits set
ok 64 - Distribution Bias Check for Keyset 'Sparse' - 32-bit keys with up to 6 bits set
# Keyset 'Sparse' - 40-bit keys with up to 6 bits set - 4598479 keys
# Testing collisions   - Expected     0.00, actual        0 ( 0.00x) - passed
ok 65 - Collision Rate for Keyset 'Sparse' - 40-bit keys with up to 6 bits set
ok 66 - Distribution Bias Check for Keyset 'Sparse' - 40-bit keys with up to 6 bits set
# Keyset 'Sparse' - 48-bit keys with up to 5 bits set - 1925357 keys
# Testing collisions   - Expected     0.00, actual        0 ( 0.00x) - passed
ok 67 - Collision Rate for Keyset 'Sparse' - 48-bit keys with up to 5 bits set
ok 68 - Distribution Bias Check for Keyset 'Sparse' - 48-bit keys with up to 5 bits set
# Keyset 'Sparse' - 56-bit keys with up to 5 bits set - 4216423 keys
# Testing collisions   - Expected     0.00, actual        0 ( 0.00x) - passed
ok 69 - Collision Rate for Keyset 'Sparse' - 56-bit keys with up to 5 bits set
ok 70 - Distribution Bias Check for Keyset 'Sparse' - 56-bit keys with up to 5 bits set
# Keyset 'Sparse' - 64-bit keys with up to 5 bits set - 8303633 keys
# Testing collisions   - Expected     0.00, actual        0 ( 0.00x) - passed
ok 71 - Collision Rate for Keyset 'Sparse' - 64-bit keys with up to 5 bits set
ok 72 - Distribution Bias Check for Keyset 'Sparse' - 64-bit keys with up to 5 bits set
# Keyset 'Sparse' - 96-bit keys with up to 4 bits set - 3469497 keys
# Testing collisions   - Expected     0.00, actual        0 ( 0.00x) - passed
ok 73 - Collision Rate for Keyset 'Sparse' - 96-bit keys with up to 4 bits set
ok 74 - Distribution Bias Check for Keyset 'Sparse' - 96-bit keys with up to 4 bits set
# Keyset 'Sparse' - 256-bit keys with up to 3 bits set - 2796417 keys
# Testing collisions   - Expected     0.00, actual        0 ( 0.00x) - passed
ok 75 - Collision Rate for Keyset 'Sparse' - 256-bit keys with up to 3 bits set
ok 76 - Distribution Bias Check for Keyset 'Sparse' - 256-bit keys with up to 3 bits set
# Keyset 'Sparse' - 2048-bit keys with up to 2 bits set - 2098177 keys
# Testing collisions   - Expected     0.00, actual        0 ( 0.00x) - passed
ok 77 - Collision Rate for Keyset 'Sparse' - 2048-bit keys with up to 2 bits set
ok 78 - Distribution Bias Check for Keyset 'Sparse' - 2048-bit keys with up to 2 bits set
ok 79 - Keyset 'Sparse' # metrohash128_2
# Keyset 'CRC-MultiCollision' - 100000 x 16 block keys - 128-bytes long - 10 seeds
# Testing collisions   - Expected     0.00, actual        0 ( 0.00x) - passed
ok 80 - Collision Rate for Keyset 'CRC-MultiCollision' - seed 1 # metrohash128_2
# Testing collisions   - Expected     0.00, actual        0 ( 0.00x) - passed
ok 81 - Collision Rate for Keyset 'CRC-MultiCollision' - seed 2 # metrohash128_2
# Testing collisions   - Expected     0.00, actual        0 ( 0.00x) - passed
ok 82 - Collision Rate for Keyset 'CRC-MultiCollision' - seed 3 # metrohash128_2
# Testing collisions   - Expected     0.00, actual        0 ( 0.00x) - passed
ok 83 - Collision Rate for Keyset 'CRC-MultiCollision' - seed 4 # metrohash128_2
# Testing collisions   - Expected     0.00, actual        0 ( 0.00x) - passed
ok 84 - Collision Rate for Keyset 'CRC-MultiCollision' - seed 5 # metrohash128_2
# Testing collisions   - Expected     0.00, actual        0 ( 0.00x) - passed
ok 85 - Collision Rate for Keyset 'CRC-MultiCollision' - seed 6 # metrohash128_2
# Testing collisions   - Expected     0.00, actual        0 ( 0.00x) - passed
ok 86 - Collision Rate for Keyset 'CRC-MultiCollision' - seed 7 # metrohash128_2
# Testing collisions   - Expected     0.00, actual        0 ( 0.00x) - passed
ok 87 - Collision Rate for Keyset 'CRC-MultiCollision' - seed 8 # metrohash128_2
# Testing collisions   - Expected     0.00, actual        0 ( 0.00x) - passed
ok 88 - Collision Rate for Keyset 'CRC-MultiCollision' - seed 9 # metrohash128_2
# Testing collisions   - Expected     0.00, actual        0 ( 0.00x) - passed
ok 89 - Collision Rate for Keyset 'CRC-MultiCollision' - seed 10 # metrohash128_2
### Keyset 'Combination Lowbits' Tests ###
# Keyset 'Combination' - up to 8 blocks from a set of 8 - 19173960 keys
# Testing collisions   - Expected     0.00, actual        0 ( 0.00x) - passed
ok 90 - Collision Rate for Keyset 'Combination Lowbits'
ok 91 - Distribution Bias Check for Keyset 'Combination Lowbits'
ok 92 - Keyset 'Combination Lowbits' # metrohash128_2
### Keyset 'Combination Highbits' Tests ###
# Keyset 'Combination' - up to 8 blocks from a set of 8 - 19173960 keys
# Testing collisions   - Expected     0.00, actual        0 ( 0.00x) - passed
ok 93 - Collision Rate for Keyset 'Combination Highbits'
ok 94 - Distribution Bias Check for Keyset 'Combination Highbits'
ok 95 - Keyset 'Combination Highbits' # metrohash128_2
### Keyset 'Combination Highbits2' Tests ###
# Keyset 'Combination' - up to 8 blocks from a set of 8 - 19173960 keys
# Testing collisions   - Expected     0.00, actual        0 ( 0.00x) - passed
ok 96 - Collision Rate for Keyset 'Combination Highbits2'
ok 97 - Distribution Bias Check for Keyset 'Combination Highbits2'
ok 98 - Keyset 'Combination Highbits2' # metrohash128_2
### Keyset 'Combination 0x80000000' Tests ###
# Keyset 'Combination' - up to 20 blocks from a set of 2 - 2097150 keys
# Testing collisions   - Expected     0.00, actual        0 ( 0.00x) - passed
ok 99 - Collision Rate for Keyset 'Combination 0x80000000'
ok 100 - Distribution Bias Check for Keyset 'Combination 0x80000000'
ok 101 - Keyset 'Combination 0x80000000' # metrohash128_2
### Keyset 'Combination 0x00000001' Tests ###
# Keyset 'Combination' - up to 20 blocks from a set of 2 - 2097150 keys
# Testing collisions   - Expected     0.00, actual        0 ( 0.00x) - passed
ok 102 - Collision Rate for Keyset 'Combination 0x00000001'
ok 103 - Distribution Bias Check for Keyset 'Combination 0x00000001'
ok 104 - Keyset 'Combination 0x00000001' # metrohash128_2
### Keyset 'Combination Hi-Lo' Tests ###
# Keyset 'Combination' - up to 6 blocks from a set of 15 - 12204240 keys
# Testing collisions   - Expected     0.00, actual        0 ( 0.00x) - passed
ok 105 - Collision Rate for Keyset 'Combination Hi-Lo'
ok 106 - Distribution Bias Check for Keyset 'Combination Hi-Lo'
ok 107 - Keyset 'Combination Hi-Lo' # metrohash128_2
### Keyset 'Text' Tests ###
# Keyset 'Text' - keys of form "Foo[XXXX]Bar" - 14776336 keys
# Testing collisions   - Expected     0.00, actual        0 ( 0.00x) - passed
ok 108 - Collision Rate for Keyset 'Text' - keys of form "Foo[XXXX]Bar" - 14776336 keys
ok 109 - Distribution Bias Check for Keyset 'Text' - keys of form "Foo[XXXX]Bar" - 14776336 keys
# Keyset 'Text' - keys of form "FooBar[XXXX]" - 14776336 keys
# Testing collisions   - Expected     0.00, actual        0 ( 0.00x) - passed
ok 110 - Collision Rate for Keyset 'Text' - keys of form "FooBar[XXXX]" - 14776336 keys
ok 111 - Distribution Bias Check for Keyset 'Text' - keys of form "FooBar[XXXX]" - 14776336 keys
# Keyset 'Text' - keys of form "[XXXX]FooBar" - 14776336 keys
# Testing collisions   - Expected     0.00, actual        0 ( 0.00x) - passed
ok 112 - Collision Rate for Keyset 'Text' - keys of form "[XXXX]FooBar" - 14776336 keys
ok 113 - Distribution Bias Check for Keyset 'Text' - keys of form "[XXXX]FooBar" - 14776336 keys
ok 114 - Keyset 'Text' # metrohash128_2
### Keyset 'Zeroes' Tests ###
# Keyset 'Zeroes' - 262144 keys
# Testing collisions   - Expected     0.00, actual        0 ( 0.00x) - passed
ok 115 - Collision Rate for Keyset 'Zeroes' - 262144 keys
ok 116 - Distribution Bias Check for Keyset 'Zeroes' - 262144 keys
ok 117 - Keyset 'Zeroes' # metrohash128_2
### Keyset 'Seed' Tests ###
# Keyset 'Seed' - 2000000 seeds, Key "The quick brown fox "...
# Testing collisions   - Expected     0.00, actual        0 ( 0.00x) - passed
ok 118 - Collision Rate for Keyset 'Seed' - 2000000 seeds, Key "The quick brown fox "...
ok 119 - Distribution Bias Check for Keyset 'Seed' - 2000000 seeds, Key "The quick brown fox "...
# Keyset 'Seed' - 2000000 seeds, Key ""
# Testing collisions   - Expected     0.00, actual        0 ( 0.00x) - passed
ok 120 - Collision Rate for Keyset 'Seed' - 2000000 seeds, Key ""
ok 121 - Distribution Bias Check for Keyset 'Seed' - 2000000 seeds, Key ""
# Keyset 'Seed' - 2000000 seeds, Key "00101100110101101"
# Testing collisions   - Expected     0.00, actual        0 ( 0.00x) - passed
ok 122 - Collision Rate for Keyset 'Seed' - 2000000 seeds, Key "00101100110101101"
ok 123 - Distribution Bias Check for Keyset 'Seed' - 2000000 seeds, Key "00101100110101101"
# Keyset 'Seed' - 2000000 seeds, Key "abcbcddbdebdcaaabaaa"...
# Testing collisions   - Expected     0.00, actual        0 ( 0.00x) - passed
ok 124 - Collision Rate for Keyset 'Seed' - 2000000 seeds, Key "abcbcddbdebdcaaabaaa"...
ok 125 - Distribution Bias Check for Keyset 'Seed' - 2000000 seeds, Key "abcbcddbdebdcaaabaaa"...
ok 126 - Keyset 'Seed' # metrohash128_2
### Keyset 'Effs' Tests ###
# Keyset 'Effs' - 262144 keys
# Testing collisions   - Expected     0.00, actual        0 ( 0.00x) - passed
ok 127 - Collision Rate for Keyset 'Effs' - 262144 keys
ok 128 - Distribution Bias Check for Keyset 'Effs' - 262144 keys
ok 129 - Keyset 'Effs' # metrohash128_2
not ok 130 - all tests passed # metrohash128_2
1..130
# Tests Failed. metrohash128_2 failed 3 of 130 tests.
# Testing took 2573.077262 seconds
# This is SMHasher version v1.0-demerphq-5-g86440f3 - built on Mar 10 2017.
